/*!
\page gettingstarted Getting started
<div class="has-toc"></div>

# Getting started # {#getting_started}

The wCMF project mainly consists of two parts, the application framework and an
application template.

## wCMF Framework ## {#framework}

The wCMF framework provides the infrastructure to create PHP web applications based
on the model-view-controller pattern. The project's source code is hosted at
[GitHub](https://github.com/iherwig/wcmf) and can be forked or downloaded from there.

If you manage your dependencies using [Composer](https://getcomposer.org/) you may
want to add the following lines to your `composer.json`:

<div class="json">
```
{
    "require-dev": {
        "wcmf/wcmf": "dev-master"
    }
}
```
</div>

## Default Application ## {#app}

The default application is a fully functional data managing application based on the
wCMF framework. Besides interfaces for create/read/update/delete (CRUD) operations
on all entity types defined in the domain model, it features user, role and
permission management as well as a lucene based search.

The following screenshots show the list and detail view of an _Author_ entity type.

@image html wcmf-default-app1ws.png

@image html wcmf-default-app2ws.png

### Prerequisites ### {#app_pre}

To run the wCMF default application you will need the following environment:

- Web server (e.g. Apache)
- PHP >= 5.6
- MySQL
- [Composer](https://getcomposer.org/)
- [Apache Ant](http://ant.apache.org/) for code generation and deployment

To modify the demo model you additionally need:

- UML Modeling tool (e.g. [Eclipse Papyrus](http://www.eclipse.org/papyrus/) or
  [Chronos Web Modeler](http://sourceforge.net/projects/olympos/))
  
@note A development environment based on Docker containers and the Eclipe IDE is
provided in the [wcmf-workspace](https://github.com/iherwig/wcmf-workspace) project.

### Installation ### {#app_install}

We assume that the application's root directory is accessible to your web server
and mapped to the url `http://localhost/wcmf-default-app`.

#### GitHub #### {#app_install_github}

The application's source code may be cloned from
[GitHub](https://github.com/iherwig/wcmf-default-app) using the following command:

<div class="shell">
```
$ git clone https://github.com/iherwig/wcmf-default-app
```
</div>

After that you should see the following directories:

- _app_
  - _config_
  - _locale_
  - _public_
  - _src_
- _build_
- _install_
- _model_
- _test_
- _tools_

The application uses Composer to manage external dependencies.
Execute the following command in the root directory of the application to fetch them:

<div class="shell">
```
$ composer install
```
</div>

#### Composer #### {#app_install_composer}

Alternatively you can also use Composer to install the source code together with
all dependencies:

<div class="shell">
```
$ composer create-project wcmf/wcmf-default-app wcmf-default-app
```
</div>

To get the __latest development version__ use the following command:

<div class="shell">
```
$ composer create-project wcmf/wcmf-default-app wcmf-default-app dev-master
```
</div>

### Model the domain ### {#app_model}

The application ships with a demo UML model that may be used as a quick start.
It's located in `model/model.uml`. Base models for those who want to start
from scratch are located in _model/base/cwm/_ and _model/base/papyrus/_. An
in-depth guide on modeling for wCMF may be found in the section \ref model.

### Generate the code ### {#app_gen}

A code generator is used to generate class- and configuration files from the domain
model. Execute the following command in the _build_ directory of the application in
order to run the generator:

<div class="shell">
```
$ ant generate
```
</div>

### Setup the database connection ### {#app_db}

The database connection information is defined in the file `app/config/server.ini` and
defaults to

<div class="ini">
```
[Database]
dbType = mysql
dbHostName = 127.0.0.1
dbName = wcmf_testapp
dbUserName = root
dbPassword =
dbCharSet = utf8
```
</div>

Change these values to fit your local configuration. If privileges are granted,
the database will be created automatically in the next step. If not, you have
to create it beforehand.

### Run installation scripts ### {#app_db_init}

Open a web browser and navigate to `http://localhost/wcmf-default-app/install/`.
Click the buttons:

- _Update database_ to create the application tables
- _Initialize database_ to create the initial data (e.g. the _admin_ user)

### Open the application ### {#app_run}

Navigate to `http://localhost/wcmf-default-app/app/public/` to open the login screen.
Sign in using

- Username: _admin_
- Password: _admin_
*/
